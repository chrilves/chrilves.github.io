<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@chrilves&#39; Archives</title>
    <link>https://chrilves.github.io/</link>
    <description>Recent content on @chrilves&#39; Archives</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 27 Oct 2019 22:30:00 +0200</lastBuildDate>
    
	<atom:link href="https://chrilves.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Les GADTs Par l&#39;Exemple</title>
      <link>https://chrilves.github.io/posts/les_gadts_par_l_exemple/</link>
      <pubDate>Sun, 27 Oct 2019 22:30:00 +0200</pubDate>
      
      <guid>https://chrilves.github.io/posts/les_gadts_par_l_exemple/</guid>
      <description>Soyez les bienvenu·e·s! Cette session a le dessein de vous présenter un outil de programmation très puissant. Alors que la plupart des introductions sur le sujet commencent par une présentation de ses fondements théoriques d&amp;rsquo;une manière très formelle, nous avons choisi de vous le présenter à travers de courts exemples et des cas d&amp;rsquo;utilisation concrets.
Cet atelier est composé de trois parties. La dernière présente trois des cas d&amp;rsquo;utilisation des plus utiles.</description>
    </item>
    
    <item>
      <title>GADTs By Use Cases</title>
      <link>https://chrilves.github.io/posts/gadts_by_use_cases/</link>
      <pubDate>Sat, 26 Oct 2019 05:00:00 +0200</pubDate>
      
      <guid>https://chrilves.github.io/posts/gadts_by_use_cases/</guid>
      <description>This workshop will be presented at ScalaIO 2019, in Lyon (France), on Tuesday the 29th of October at 9am.
Welcome. This session will introduce you to a very powerful tool in programming. Whereas most introduction start by presenting its theoretical foundations in a very formal way, we chose to present it via short examples and practical use cases.
This workshop is made of three parts. The last one presents three of the most valuable use cases.</description>
    </item>
    
    <item>
      <title>Proving Primality with GADTs</title>
      <link>https://chrilves.github.io/posts/prime/</link>
      <pubDate>Tue, 01 Oct 2019 10:42:39 +0100</pubDate>
      
      <guid>https://chrilves.github.io/posts/prime/</guid>
      <description>The Scala source code is at github.com/chrilves/gadt.scala. The Haxe source code is at github.com/chrilves/Gadts.hx. The Web Application is here.  Today we will explore the Curry–Howard correspondence. Our mission is writing, in Scala&amp;rsquo;s type system, the property on natural number of being prime. Wikipedia defines it by:
 A natural number (1, 2, 3, 4, 5, 6, etc.) is called a prime number (or a prime) if it is greater than 1 and cannot be written as a product of two natural numbers that are both smaller than it.</description>
    </item>
    
    <item>
      <title>Recursion Schemes: the high-school introduction</title>
      <link>https://chrilves.github.io/posts/recursion_schemes_intro/</link>
      <pubDate>Fri, 22 Mar 2019 10:00:00 +0100</pubDate>
      
      <guid>https://chrilves.github.io/posts/recursion_schemes_intro/</guid>
      <description>I gave a talk on Thursday the 28th of march 2019 at the 96th Paris Scala User Group session on about this. The slides are here.
Recursion schemes are said to be a tough subject. Articles and presentations often flood the audience with lots of names such as Algebra, CoAlgebra, catamorphisms, anamorhpisms, hylomorphism, etc. Is knowing all these concepts required to understand recursion schemes? I have good news for you: it isn&amp;rsquo;t!</description>
    </item>
    
    <item>
      <title>Demystifying GADTs</title>
      <link>https://chrilves.github.io/posts/gadts_intro/</link>
      <pubDate>Wed, 20 Feb 2019 11:09:38 +0100</pubDate>
      
      <guid>https://chrilves.github.io/posts/gadts_intro/</guid>
      <description>Generalized Algebraic Data Types (GADT) is certainly one of the most feared concept in programming nowadays. Very few mainstream languages support GADTs. The only ones i know which does are Haskell, Scala, OCaml and Haxe. The idea is actually very simple but often presented in complicated ways. In fact, if you&amp;rsquo;re familiar to both basic Object-Oriented-with-Generics and basic functional programming, then you most probably are already familiar with GADTs without even knowing you are.</description>
    </item>
    
    <item>
      <title>Episode 5 - Recursive Data Types</title>
      <link>https://chrilves.github.io/types/5-rectypes/</link>
      <pubDate>Sun, 16 Dec 2018 00:05:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/5-rectypes/</guid>
      <description>We have seen many types but we still don&amp;rsquo;t know how to represent numbers, lists, trees, free monads, or any type with an infinite number of values. One again we will start by simple examples. Like always, do no skim through them but take the time to develop a deep understanding. If you feel uncomfortable with complex examples, it means you missed something important in the simple ones.
A simple example We will take as example an encoding of non-negative integers, also called natural numbers, i.</description>
    </item>
    
    <item>
      <title>Episode 4 - CoProducts</title>
      <link>https://chrilves.github.io/types/4-coproducts/</link>
      <pubDate>Sun, 16 Dec 2018 00:04:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/4-coproducts/</guid>
      <description>CoProducts, often called sum types, discriminated unions or disjoint unions, are a convenient way to express an alternative between different types. The coproduct of n types (with n being 0, 1, 2, etc) A_1, A_2, &amp;hellip;, A_n is precisely the type whose values are (i, a_i) where i is a number, called the tag, between 1 and n both included (1 ≤ i ≤ n) and a_i is a value of type A_i (the actual type then depends on the value of i).</description>
    </item>
    
    <item>
      <title>Episode 3 - Products</title>
      <link>https://chrilves.github.io/types/3-products/</link>
      <pubDate>Sun, 16 Dec 2018 00:03:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/3-products/</guid>
      <description>Products, often called tuples, records or case classes, are a convenient way to bundle values of different types into a single value. The product of n types (with n being 0, 1, 2, etc) A_1, A_2, &amp;hellip;, A_n is precisely the type whose values are formed with exactly one value of each type A_i for 1 ≤ i ≤ n. It is written (A_1, A_2, ..., A_n) in many languages, Product_n[A_1, A_2, .</description>
    </item>
    
    <item>
      <title>Episode 2 - Enumerations</title>
      <link>https://chrilves.github.io/types/2-enums/</link>
      <pubDate>Sun, 16 Dec 2018 00:02:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/2-enums/</guid>
      <description>Now that we know what types are and why there are useful, it is about time to meet some remarkable ones. But before we start, there is some important things to state. As a developer i know how tempting it is to search ready-to-paste answers. But the subject of these post series is nothing like a ready-to-paste answers cookbook. On the contrary, this is a presentation of deep, difficult but rewarding concepts.</description>
    </item>
    
    <item>
      <title>Episode 1 - Why Types?</title>
      <link>https://chrilves.github.io/types/1-why/</link>
      <pubDate>Sun, 16 Dec 2018 00:01:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/1-why/</guid>
      <description>Why using types? When are they useful? Why we should care about types? What are types? These are the questions this series of posts give some answers to. Let&amp;rsquo;s start by realizing a fundamental fact: types are everywhere! Business models are all about types: users, shipments, orders, etc. Placing a user in the cart or shipping a client just makes no sense. Types are specification, discriminating what makes sense from what makes not.</description>
    </item>
    
    <item>
      <title>Let&#39;s meet the charming fold family</title>
      <link>https://chrilves.github.io/posts/folds/</link>
      <pubDate>Fri, 30 Nov 2018 14:13:12 +0100</pubDate>
      
      <guid>https://chrilves.github.io/posts/folds/</guid>
      <description>Today we will meet an amazing family: the fold functions!
The well known foldRight Lists is one of the first data structure every developer/computer scientist meet in her/his journey into programming:
sealed abstract class List[+A] final case object Nil extends List[Nothing] final case class Cons[+A](head: A, tail: List[A]) extends List[A] It means means values of type List[A] can be of (only) two forms:
 either Nil or Cons(head, tail) for some values head of type A and tail of type List[A]  For example we can define the following lists:</description>
    </item>
    
    <item>
      <title>How to make game in the browser thanks to ScalaJS</title>
      <link>https://chrilves.github.io/posts/slimetrail/</link>
      <pubDate>Tue, 18 Sep 2018 15:30:53 +0200</pubDate>
      
      <guid>https://chrilves.github.io/posts/slimetrail/</guid>
      <description>A few month ago, the Paris Scala User Group kindly invited me present a workshop introducing [Scala.js(https://www.scala-js.org/). Even better, i had the chance to present it at ScalaIO 2018. The workshop materials are here.
I will present how to develop a web application in Scala.js. This talk is for Scala developers having a penchant for web development but rebuffed by JavaScript. It goes from ScalaJS basics to the implementation of a naive virtual DOM written in Scala.</description>
    </item>
    
    <item>
      <title>JSON to XML: the probably a tiny bit over engineered way</title>
      <link>https://chrilves.github.io/posts/json2xml/</link>
      <pubDate>Tue, 18 Sep 2018 11:18:27 +0200</pubDate>
      
      <guid>https://chrilves.github.io/posts/json2xml/</guid>
      <description>The complete code of the article. You need Cats and Play-Json in order to run it.
The Slides are here
It happens regularly in software development that we have to connect systems speaking different languages. JSON is nowadays ubiquitous in service communication, especially in web development but XML still has its fair amount of bastions. Imagine you need to pass information provided by a JSON API through an XML layer, you need a converter.</description>
    </item>
    
    <item>
      <title>F-Algebra talk at ScalaIO 2017: Modéliser astucieusement vos données</title>
      <link>https://chrilves.github.io/posts/falgebra_scalaio_2017/</link>
      <pubDate>Mon, 18 Sep 2017 15:55:26 +0200</pubDate>
      
      <guid>https://chrilves.github.io/posts/falgebra_scalaio_2017/</guid>
      <description> I had the chance to present a talk about F-Algebras at ScalaIO 2017.
The Video  The Slides  </description>
    </item>
    
  </channel>
</rss>