<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on @chrilves&#39; Archives</title>
    <link>https://chrilves.github.io/en/posts/</link>
    <description>Recent content in Posts on @chrilves&#39; Archives</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 11 Jul 2020 19:43:00 +0200</lastBuildDate>
    <atom:link href="https://chrilves.github.io/en/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Playing with Probability in Scala 3</title>
      <link>https://chrilves.github.io/en/posts/probability_in_scala_3_all_sides/</link>
      <pubDate>Sat, 11 Jul 2020 19:43:00 +0200</pubDate>
      <guid>https://chrilves.github.io/en/posts/probability_in_scala_3_all_sides/</guid>
      <description>&lt;p&gt;Here is a simple experiment: take a &lt;strong&gt;fair&lt;/strong&gt; dice (or a coin) and roll it until every&#xA;side of the dice has been observed &lt;strong&gt;at least once&lt;/strong&gt;. Write down the number of&#xA;rolls and repeat the operation several times.&#xA;&lt;em&gt;On average, how many rolls does it take to observe every side of the dice at&#xA;least once?&lt;/em&gt;&#xA;This is precisely the question we are about to answer together.&lt;/p&gt;&#xA;&lt;p&gt;Solving Maths puzzle is fun. Solving them using the shiniest features of&#xA;&lt;a href=&#34;https://dotty.epfl.ch/&#34;&gt;Scala 3&lt;/a&gt; is even amazingly funnier! If you do not have&#xA;&lt;em&gt;Scala 3&lt;/em&gt; installed yet:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Les GADTs Par l&#39;Exemple</title>
      <link>https://chrilves.github.io/en/posts/les_gadts_par_l_exemple/</link>
      <pubDate>Sun, 27 Oct 2019 22:30:00 +0200</pubDate>
      <guid>https://chrilves.github.io/en/posts/les_gadts_par_l_exemple/</guid>
      <description>&lt;p&gt;Soyez les bienvenu¬∑e¬∑s! Cette session a le dessein de vous pr√©senter&#xA;un outil de programmation tr√®s puissant. Alors que la plupart des&#xA;introductions sur le sujet commencent par une pr√©sentation de ses&#xA;fondements th√©oriques d&amp;rsquo;une mani√®re tr√®s formelle, nous avons choisi&#xA;de vous le pr√©senter √† travers de courts exemples et des cas&#xA;d&amp;rsquo;utilisation concrets.&lt;/p&gt;&#xA;&lt;p&gt;Cet atelier est compos√© de trois parties. La derni√®re pr√©sente trois&#xA;des cas d&amp;rsquo;utilisation des plus utiles. Ils forment les usages majeurs&#xA;en pratique. Mais ne vous y aventurez pas sans pr√©paration! Cette partie&#xA;est la derni√®re pour une bonne raison: elle s&amp;rsquo;appuie massivement sur&#xA;les le√ßons des parties pr√©c√©dentes.&#xA;Commencez par &lt;a href=&#34;#premier-contact&#34;&gt;Premier Contact&lt;/a&gt;, elle vous exposera,&#xA;via les plus simples exemples, les id√©es clefs. Son but est&#xA;d&amp;rsquo;ouvrir votre esprit √† des mani√®res d&amp;rsquo;utiliser les types et donn√©es&#xA;que vous n&amp;rsquo;avez vraisemblablement jamais soup√ßonn√©es.&#xA;Arpentez ensuite&#xA;&lt;a href=&#34;#cas-d-utilisation-simples-et-utiles-relations-sur-les-types&#34;&gt;Cas d‚Äôutilisation simples et utiles: relations sur les types&lt;/a&gt;,&#xA;pour un premier d√©fi devant un usage pratique.&#xA;Apr√®s cela seulement vous serez pr√™t¬∑e pour&#xA;&lt;a href=&#34;#cas-d-utilisation-plus-avanc%C3%A9s&#34;&gt;Cas d‚ÄôUtilisation Plus Avanc√©s&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GADTs By Use Cases</title>
      <link>https://chrilves.github.io/en/posts/gadts_by_use_cases/</link>
      <pubDate>Sat, 26 Oct 2019 05:00:00 +0200</pubDate>
      <guid>https://chrilves.github.io/en/posts/gadts_by_use_cases/</guid>
      <description>&lt;p&gt;&lt;strong&gt;This workshop will be presented at &lt;a href=&#34;https://scala.io/&#34;&gt;ScalaIO 2019&lt;/a&gt;,&#xA;in &lt;em&gt;Lyon&lt;/em&gt; (&lt;em&gt;France&lt;/em&gt;), on &lt;a href=&#34;https://schedule.scala.io/#/day/1&#34;&gt;&lt;em&gt;Tuesday the 29th of October&lt;/em&gt; at 9am&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Welcome. This session will introduce you to a very powerful tool in&#xA;programming. Whereas most introduction start by presenting its&#xA;theoretical foundations in a very formal way, we chose to present&#xA;it via short examples and practical use cases.&lt;/p&gt;&#xA;&lt;p&gt;This workshop is made of three parts. The last one presents three&#xA;of the most valuable use cases. They are the real big powerful use cases.&#xA;But do not go there unprepared! This is the last part for a reason:&#xA;they rely massively on lessons you will learn in the previous parts.&#xA;Start by &lt;a href=&#34;#first-contact&#34;&gt;First Contact&lt;/a&gt;, it will show&#xA;you, via the simplest examples, the core ideas. Its goal is to open your&#xA;mind to ways of using types and data you may have never imagined possible.&#xA;Then go to&#xA;&lt;a href=&#34;#easy-useful-use-cases-relations-on-types&#34;&gt;Easy Useful Use Cases: Relations on Types&lt;/a&gt;,&#xA;for the first real-life challenge.&#xA;Then, you are ready for &lt;a href=&#34;#more-advanced-use-cases&#34;&gt;More Advanced Use Cases&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Proving Primality with GADTs</title>
      <link>https://chrilves.github.io/en/posts/prime/</link>
      <pubDate>Tue, 01 Oct 2019 10:42:39 +0100</pubDate>
      <guid>https://chrilves.github.io/en/posts/prime/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;The &lt;a href=&#34;https://scala-lang.org&#34;&gt;Scala&lt;/a&gt; source code is at &lt;a href=&#34;https://github.com/chrilves/gadt.scala&#34;&gt;github.com/chrilves/gadt.scala&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;The &lt;a href=&#34;https://haxe.org&#34;&gt;Haxe&lt;/a&gt; source code is at &lt;a href=&#34;https://github.com/chrilves/Gadts.hx&#34;&gt;github.com/chrilves/Gadts.hx&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://chrilves.github.io/prime&#34;&gt;The Web Application is here.&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Today we will explore the &lt;a href=&#34;https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence&#34;&gt;Curry‚ÄìHoward correspondence&lt;/a&gt;. Our mission&#xA;is writing, in &lt;a href=&#34;https://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;&amp;rsquo;s &lt;em&gt;type system&lt;/em&gt;, the property&#xA;on natural number of being &lt;a href=&#34;https://en.wikipedia.org/wiki/Prime_number&#34;&gt;prime&lt;/a&gt;. Wikipedia defines it by:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A natural number (1, 2, 3, 4, 5, 6, etc.) is called a &lt;strong&gt;prime number&lt;/strong&gt; (or a &lt;strong&gt;prime&lt;/strong&gt;) if it is greater than 1 and cannot be written as a product of two natural numbers that are both smaller than it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recursion Schemes: the high-school introduction</title>
      <link>https://chrilves.github.io/en/posts/recursion_schemes_intro/</link>
      <pubDate>Fri, 22 Mar 2019 10:00:00 +0100</pubDate>
      <guid>https://chrilves.github.io/en/posts/recursion_schemes_intro/</guid>
      <description>&lt;p&gt;&lt;em&gt;I gave a talk on Thursday the 28th of march 2019 at the &lt;a href=&#34;https://www.meetup.com/fr-FR/Paris-Scala-User-Group-PSUG/events/259498147/&#34;&gt;96th Paris Scala User Group&lt;/a&gt; session on about this. The &lt;a href=&#34;https://chrilves.github.io/slides/recursion-schemes-intro/index.html&#34;&gt;slides are here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Recursion schemes are said to be a tough subject. Articles and presentations often&#xA;flood the audience with lots of names such as &lt;em&gt;Algebra&lt;/em&gt;, &lt;em&gt;CoAlgebra&lt;/em&gt;, &lt;em&gt;catamorphisms&lt;/em&gt;,&#xA;&lt;em&gt;anamorhpisms&lt;/em&gt;, &lt;em&gt;hylomorphism&lt;/em&gt;, etc. Is knowing all these concepts required to understand&#xA;recursion schemes? I have good news for you: it isn&amp;rsquo;t! All you need, to see what recursion&#xA;schemes are and why there are useful, can be presented with just a single basic function,&#xA;often taught as an introduction to programming: factorial. I&amp;rsquo;m glad to welcome you to&#xA;to the high-school introduction to recursion scheme üòâ.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Demystifying GADTs</title>
      <link>https://chrilves.github.io/en/posts/gadts_intro/</link>
      <pubDate>Wed, 20 Feb 2019 11:09:38 +0100</pubDate>
      <guid>https://chrilves.github.io/en/posts/gadts_intro/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Generalized Algebraic Data Types (GADT)&lt;/strong&gt; is certainly one of the most feared concept in programming nowadays. Very few mainstream languages support GADTs. The only ones i know which does are &lt;a href=&#34;https://www.haskell.org/ghc&#34;&gt;Haskell&lt;/a&gt;, &lt;a href=&#34;https://www.scala-lang.org&#34;&gt;Scala&lt;/a&gt;, &lt;a href=&#34;https://ocaml.org/index.fr.html&#34;&gt;OCaml&lt;/a&gt; and &lt;a href=&#34;https://haxe.org&#34;&gt;Haxe&lt;/a&gt;. The idea is actually very simple but often presented in complicated ways. In fact, if you&amp;rsquo;re familiar to both basic &lt;em&gt;Object-Oriented-with-Generics&lt;/em&gt; and basic &lt;em&gt;functional&lt;/em&gt; programming, then you most probably are already familiar with GADTs without even knowing you are. But if GADTs are so simple, why so many people feel terrified by them? Well GADTs rely on two fundamental ideas, one of them is known by every &lt;em&gt;Object-Oriented-with-Generics&lt;/em&gt; programmer while the other is known by every &lt;em&gt;functional&lt;/em&gt; programmer. The problem is most people make the huge mistake of opposing them even though they are complementary. So before diving into GADTs, let me remind you of these elementary notions from &lt;em&gt;Object-Oriented&lt;/em&gt; and &lt;em&gt;functional&lt;/em&gt; programming.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s meet the charming fold family</title>
      <link>https://chrilves.github.io/en/posts/folds/</link>
      <pubDate>Fri, 30 Nov 2018 14:13:12 +0100</pubDate>
      <guid>https://chrilves.github.io/en/posts/folds/</guid>
      <description>&lt;p&gt;Today we will meet an amazing family: the &lt;code&gt;fold&lt;/code&gt; functions!&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-well-known-foldright&#34;&gt;The well known &lt;code&gt;foldRight&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_(abstract_data_type)&#34;&gt;Lists&lt;/a&gt; is one of the first&#xA;data structure every developer/computer scientist meet in her/his journey into programming:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;+A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Nil&lt;/span&gt;                              &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Cons&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;+A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;head&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; tail&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>How to make game in the browser thanks to ScalaJS</title>
      <link>https://chrilves.github.io/en/posts/slimetrail/</link>
      <pubDate>Tue, 18 Sep 2018 15:30:53 +0200</pubDate>
      <guid>https://chrilves.github.io/en/posts/slimetrail/</guid>
      <description>&lt;p&gt;A few month ago, the &lt;a href=&#34;https://www.meetup.com/fr-FR/Paris-Scala-User-Group-PSUG/&#34;&gt;Paris Scala User Group&lt;/a&gt; kindly invited me present a &lt;a href=&#34;https://www.meetup.com/fr-FR/Paris-Scala-User-Group-PSUG/events/251045516/&#34;&gt;workshop&lt;/a&gt; introducing [Scala.js(https://www.scala-js.org/). Even better, i had the chance to present it at &lt;a href=&#34;https://scala.io/talks.html#/#PGM-9348&#34;&gt;ScalaIO 2018&lt;/a&gt;. The &lt;a href=&#34;https://chrilves.github.io/scalajs-workshop&#34;&gt;workshop materials are here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I will present how to develop a web application in Scala.js. This talk is for Scala developers having a penchant for web development but rebuffed by JavaScript. It goes from ScalaJS basics to the implementation of a naive virtual DOM written in Scala. It presents:&lt;/p&gt;</description>
    </item>
    <item>
      <title>JSON to XML: the probably a tiny bit over engineered way</title>
      <link>https://chrilves.github.io/en/posts/json2xml/</link>
      <pubDate>Tue, 18 Sep 2018 11:18:27 +0200</pubDate>
      <guid>https://chrilves.github.io/en/posts/json2xml/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://chrilves.github.io/slides/json2xml/json2xml.scala&#34;&gt;The complete code of the article&lt;/a&gt;. You need  &lt;a href=&#34;https://typelevel.org/cats/&#34;&gt;Cats&lt;/a&gt; and &lt;a href=&#34;https://github.com/playframework/play-json&#34;&gt;Play-Json&lt;/a&gt; in order to run it.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://chrilves.github.io/slides/json2xml/index.html&#34;&gt;The Slides are here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;It happens regularly in software development that we have to connect systems speaking different languages. JSON is nowadays ubiquitous in service communication, especially in web development but XML still has its fair amount of bastions. Imagine you need to pass information provided by a JSON API through an XML layer, you need a converter.&lt;/p&gt;</description>
    </item>
    <item>
      <title>F-Algebra talk at ScalaIO 2017: Mod√©liser astucieusement vos donn√©es</title>
      <link>https://chrilves.github.io/en/posts/falgebra_scalaio_2017/</link>
      <pubDate>Mon, 18 Sep 2017 15:55:26 +0200</pubDate>
      <guid>https://chrilves.github.io/en/posts/falgebra_scalaio_2017/</guid>
      <description>&lt;p&gt;I had the chance to present a talk about &lt;em&gt;F-Algebras&lt;/em&gt; at &lt;a href=&#34;https://scala.io/2017/talks.html#/#SJO-8794&#34;&gt;ScalaIO 2017&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-video&#34;&gt;The Video&lt;/h1&gt;&#xA;&lt;iframe width=&#34;1024&#34; height=&#34;768&#34; src=&#34;https://www.youtube.com/embed/MfxN6oSLKDU&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;  &#xA;&lt;h1 id=&#34;the-slidesslidesf-algebra-talk&#34;&gt;&lt;a href=&#34;https://chrilves.github.io/slides/f-algebra-talk/&#34;&gt;The Slides&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;iframe width=&#34;1024&#34; height=&#34;768&#34; src=&#34;https://chrilves.github.io/slides/f-algebra-talk/&#34;&gt;&lt;/iframe&gt;</description>
    </item>
  </channel>
</rss>
