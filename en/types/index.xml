<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Types on @chrilves&#39; Archives</title>
    <link>https://chrilves.github.io/en/types/</link>
    <description>Recent content in Introduction to Types on @chrilves&#39; Archives</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 16 Dec 2018 00:05:00 +0000</lastBuildDate>
    <atom:link href="https://chrilves.github.io/en/types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Episode 5 - Recursive Data Types</title>
      <link>https://chrilves.github.io/en/types/5-rectypes/</link>
      <pubDate>Sun, 16 Dec 2018 00:05:00 +0000</pubDate>
      <guid>https://chrilves.github.io/en/types/5-rectypes/</guid>
      <description>&lt;p&gt;We have seen many types but we still don&amp;rsquo;t know how to represent numbers, lists, trees, free monads, or any type with an infinite number of values. One again we will start by simple examples. Like always, &lt;strong&gt;do no skim through&lt;/strong&gt; them but take the time to &lt;strong&gt;develop a deep understanding&lt;/strong&gt;. If you feel uncomfortable with complex examples, it means you missed something important in the simple ones.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h2&gt;&#xA;&lt;p&gt;We will take as example an encoding of &lt;em&gt;non-negative&lt;/em&gt; integers, also called &lt;strong&gt;natural numbers&lt;/strong&gt;, i.e. numbers &lt;em&gt;0&lt;/em&gt;, &lt;em&gt;1&lt;/em&gt;, &lt;em&gt;2&lt;/em&gt;, &lt;em&gt;3&lt;/em&gt; and so on. There are actually many encodings possible, but we will take a simple encoding known as &lt;a href=&#34;https://wiki.haskell.org/Peano_numbers&#34;&gt;Peano numbers&lt;/a&gt;. Did you ever wonder how &lt;em&gt;natural numbers&lt;/em&gt; are built? There can actually be built starting from &lt;code&gt;0&lt;/code&gt; then adding &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; to make &lt;code&gt;1&lt;/code&gt;, then adding &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; to make &lt;code&gt;2&lt;/code&gt;, then adding &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;2&lt;/code&gt; to make &lt;code&gt;3&lt;/code&gt;, then adding &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;3&lt;/code&gt; to make &lt;code&gt;4&lt;/code&gt;, and so on. Our encoding will mimic this construction. We need &lt;strong&gt;two constructors&lt;/strong&gt;: one of represent &lt;code&gt;0&lt;/code&gt; and the other to represent the operation of adding &lt;code&gt;1&lt;/code&gt; to the previous number to make a new one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Episode 4 - CoProducts</title>
      <link>https://chrilves.github.io/en/types/4-coproducts/</link>
      <pubDate>Sun, 16 Dec 2018 00:04:00 +0000</pubDate>
      <guid>https://chrilves.github.io/en/types/4-coproducts/</guid>
      <description>&lt;p&gt;CoProducts, often called &lt;em&gt;sum types&lt;/em&gt;, &lt;em&gt;discriminated unions&lt;/em&gt; or &lt;em&gt;disjoint unions&lt;/em&gt;, are a convenient way to express an alternative between different types. The &lt;strong&gt;coproduct&lt;/strong&gt; of &lt;code&gt;n&lt;/code&gt; types (with &lt;code&gt;n&lt;/code&gt; being &lt;em&gt;0&lt;/em&gt;, &lt;em&gt;1&lt;/em&gt;, &lt;em&gt;2&lt;/em&gt;, etc) &lt;code&gt;A_1&lt;/code&gt;, &lt;code&gt;A_2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;A_n&lt;/code&gt; is precisely the type whose values are &lt;code&gt;(i, a_i)&lt;/code&gt; where &lt;code&gt;i&lt;/code&gt; is a number, called the &lt;strong&gt;tag&lt;/strong&gt;, between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; both included (&lt;code&gt;1 ≤ i ≤  n&lt;/code&gt;) and &lt;code&gt;a_i&lt;/code&gt; is a value of type &lt;code&gt;A_i&lt;/code&gt; (the actual type then depends on the value of &lt;code&gt;i&lt;/code&gt;). Is is often written &lt;code&gt;Either[A_1, ..., A_n]&lt;/code&gt; in programming and &lt;code&gt;A_1 + ... + A_n&lt;/code&gt; in &lt;em&gt;Type Theory&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Episode 3 - Products</title>
      <link>https://chrilves.github.io/en/types/3-products/</link>
      <pubDate>Sun, 16 Dec 2018 00:03:00 +0000</pubDate>
      <guid>https://chrilves.github.io/en/types/3-products/</guid>
      <description>&lt;p&gt;Products, often called &lt;em&gt;tuples&lt;/em&gt;, &lt;em&gt;records&lt;/em&gt; or &lt;strong&gt;case classes&lt;/strong&gt;, are a convenient way to bundle values of different types into a single value. The &lt;strong&gt;product&lt;/strong&gt; of &lt;code&gt;n&lt;/code&gt; types (with &lt;code&gt;n&lt;/code&gt; being &lt;em&gt;0&lt;/em&gt;, &lt;em&gt;1&lt;/em&gt;, &lt;em&gt;2&lt;/em&gt;, etc) &lt;code&gt;A_1&lt;/code&gt;, &lt;code&gt;A_2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;A_n&lt;/code&gt; is precisely the type whose values are formed with exactly one value of each type &lt;code&gt;A_i&lt;/code&gt; for &lt;code&gt;1 ≤ i ≤  n&lt;/code&gt;. It is written &lt;code&gt;(A_1, A_2, ..., A_n)&lt;/code&gt; in many languages, &lt;code&gt;Product_n[A_1, A_2, ..., A_n]&lt;/code&gt; in &lt;em&gt;Scala&lt;/em&gt; and &lt;code&gt;A_1 × ... × A_n&lt;/code&gt; in &lt;em&gt;Type Theory&lt;/em&gt;. As an example, the product of two types &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; would be defined as&lt;/p&gt;</description>
    </item>
    <item>
      <title>Episode 2 - Enumerations</title>
      <link>https://chrilves.github.io/en/types/2-enums/</link>
      <pubDate>Sun, 16 Dec 2018 00:02:00 +0000</pubDate>
      <guid>https://chrilves.github.io/en/types/2-enums/</guid>
      <description>&lt;p&gt;Now that we know what types are and why there are useful, it is about time to meet some remarkable ones. But before we start, there is some important things to state. As a developer i know how tempting it is to search ready-to-paste answers. But &lt;em&gt;the subject of these post series is nothing like a ready-to-paste answers cookbook&lt;/em&gt;. On the contrary, this is a presentation of &lt;strong&gt;deep, difficult but rewarding concepts&lt;/strong&gt;. Do not see them as patterns to follow blindly, like it is unfortunately too often the case in our field. Instead, &lt;strong&gt;take the time to develop a deep understanding&lt;/strong&gt; of what is really going on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Episode 1 - Why Types?</title>
      <link>https://chrilves.github.io/en/types/1-why/</link>
      <pubDate>Sun, 16 Dec 2018 00:01:00 +0000</pubDate>
      <guid>https://chrilves.github.io/en/types/1-why/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why using&lt;/strong&gt; types? &lt;strong&gt;When&lt;/strong&gt; are they useful? &lt;strong&gt;Why&lt;/strong&gt; we should &lt;strong&gt;care&lt;/strong&gt; about types? &lt;strong&gt;What&lt;/strong&gt; are types? These are the questions &lt;a href=&#34;https://chrilves.github.io/en/types/&#34;&gt;this series of posts&lt;/a&gt; give some answers to. Let&amp;rsquo;s start by realizing a fundamental fact: &lt;strong&gt;types are everywhere&lt;/strong&gt;! Business models are all about types: users, shipments, orders, etc. Placing a user in the cart or shipping a client just makes no sense. &lt;strong&gt;Types are specification&lt;/strong&gt;, discriminating what makes sense from what makes not.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
