<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on @chrilves&#39; Archives</title>
    <link>https://chrilves.github.io/posts/</link>
    <description>Recent content in Posts on @chrilves&#39; Archives</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 17 Dec 2018 14:51:53 +0100</lastBuildDate>
    
	<atom:link href="https://chrilves.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Recursion Schemes: the high-school introduction</title>
      <link>https://chrilves.github.io/posts/recursion_schemes_intro/</link>
      <pubDate>Fri, 22 Mar 2019 10:00:00 +0100</pubDate>
      
      <guid>https://chrilves.github.io/posts/recursion_schemes_intro/</guid>
      <description>I&amp;rsquo;ll be giving a talk on Thursday the 28th of march 2019 at the 96th Paris Scala User Group session on about this.
Recursion schemes are said to be a tough subject. Articles and presentations often flood the audience with lots of names such as Algebra, CoAlgebra, catamorphisms, anamorhpisms, hylomorphism, etc. Is knowing all these concepts required to understand recursion schemes? I have good news for you: it isn&amp;rsquo;t! All you need, to see what recursion schemes are and why there are useful, can be presented with just a single basic function, often taught as an introduction to programming: factorial.</description>
    </item>
    
    <item>
      <title>Demystifying GADTs</title>
      <link>https://chrilves.github.io/posts/gadts_intro/</link>
      <pubDate>Wed, 20 Feb 2019 11:09:38 +0100</pubDate>
      
      <guid>https://chrilves.github.io/posts/gadts_intro/</guid>
      <description>Generalized Algebraic Data Types (GADT) is certainly one of the most feared concept in programming nowadays. Very few mainstream languages support GADTs. The only ones i know which does are Haskell, Scala, OCaml and Haxe. The idea is actually very simple but often presented in complicated ways. In fact, if you&amp;rsquo;re familiar to both basic Object-Oriented-with-Generics and basic functional programming, then you most probably are already familiar with GADTs without even knowing you are.</description>
    </item>
    
    <item>
      <title>Let&#39;s meet the charming fold family</title>
      <link>https://chrilves.github.io/posts/folds/</link>
      <pubDate>Fri, 30 Nov 2018 14:13:12 +0100</pubDate>
      
      <guid>https://chrilves.github.io/posts/folds/</guid>
      <description>Today we will meet an amazing family: the fold functions!
The well known foldRight Lists is one of the first data structure every developer/computer scientist meet in her/his journey into programming:
sealed abstract class List[+A] final case object Nil extends List[Nothing] final case class Cons[+A](head: A, tail: List[A]) extends List[A] It means means values of type List[A] can be of (only) two forms:
 either Nil or Cons(head, tail) for some values head of type A and tail of type List[A]  For example we can define the following lists:</description>
    </item>
    
    <item>
      <title>How to make game in the browser thanks to ScalaJS</title>
      <link>https://chrilves.github.io/posts/slimetrail/</link>
      <pubDate>Tue, 18 Sep 2018 15:30:53 +0200</pubDate>
      
      <guid>https://chrilves.github.io/posts/slimetrail/</guid>
      <description>A few month ago, the Paris Scala User Group kindly invited me present a workshop introducing [Scala.js(https://www.scala-js.org/). Even better, i will have the chance to present it in October at ScalaIO.
I will present how to develop a web application in Scala.js. This talk is for Scala developers having a penchant for web development but rebuffed by JavaScript. It goes from ScalaJS basics to the implementation of a naive virtual DOM written in Scala.</description>
    </item>
    
    <item>
      <title>JSON to XML: the probably a tiny bit over engineered way</title>
      <link>https://chrilves.github.io/posts/json2xml/</link>
      <pubDate>Tue, 18 Sep 2018 11:18:27 +0200</pubDate>
      
      <guid>https://chrilves.github.io/posts/json2xml/</guid>
      <description>The complete code of the article. You need Cats and Play-Json in order to run it.
It happens regularly in software development that we have to connect systems speaking different languages. JSON is nowadays ubiquitous in service communication, especially in web development but XML still has its fair amount of bastions. Imagine you need to pass information provided by a JSON API through an XML layer, you need a converter.</description>
    </item>
    
    <item>
      <title>F-Algebra talk at ScalaIO 2017: Modéliser astucieusement vos données</title>
      <link>https://chrilves.github.io/posts/falgebra_scalaio_2017/</link>
      <pubDate>Mon, 18 Sep 2017 15:55:26 +0200</pubDate>
      
      <guid>https://chrilves.github.io/posts/falgebra_scalaio_2017/</guid>
      <description> I had the chance to present a talk about F-Algebras at ScalaIO 2017.
The Video  The Slides  </description>
    </item>
    
  </channel>
</rss>