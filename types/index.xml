<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Types on @chrilves&#39; Archives</title>
    <link>https://chrilves.github.io/types/</link>
    <description>Recent content in Introduction to Types on @chrilves&#39; Archives</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 16 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chrilves.github.io/types/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Episode 5 - Recursive Data Types</title>
      <link>https://chrilves.github.io/types/5-rectypes/</link>
      <pubDate>Sun, 16 Dec 2018 00:05:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/5-rectypes/</guid>
      <description>We have seen many types but we still don&amp;rsquo;t know how to represent numbers, lists, trees, free monads, or any type with an infinite number of values. One again we will start by simple examples. Like always, do no skim through them but take the time to develop a deep understanding. If you feel uncomfortable with complex examples, it means you missed something important in the simple ones.
A simple example We will take as example an encoding of non-negative integers, also called natural numbers, i.</description>
    </item>
    
    <item>
      <title>Episode 4 - CoProducts</title>
      <link>https://chrilves.github.io/types/4-coproducts/</link>
      <pubDate>Sun, 16 Dec 2018 00:04:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/4-coproducts/</guid>
      <description>CoProducts, often called sum types, discriminated unions or disjoint unions, are a convenient way to express an alternative between different types. The coproduct of n types (with n being 0, 1, 2, etc) A_1, A_2, &amp;hellip;, A_n is precisely the type whose values are (i, a_i) where i is a number, called the tag, between 1 and n both included (1 ≤ i ≤ n) and a_i is a value of type A_i (the actual type then depends on the value of i).</description>
    </item>
    
    <item>
      <title>Episode 3 - Products</title>
      <link>https://chrilves.github.io/types/3-products/</link>
      <pubDate>Sun, 16 Dec 2018 00:03:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/3-products/</guid>
      <description>Products, often called tuples, records or case classes, are a convenient way to bundle values of different types into a single value. The product of n types (with n being 0, 1, 2, etc) A_1, A_2, &amp;hellip;, A_n is precisely the type whose values are formed with exactly one value of each type A_i for 1 ≤ i ≤ n. It is written (A_1, A_2, ..., A_n) in many languages, Product_n[A_1, A_2, .</description>
    </item>
    
    <item>
      <title>Episode 2 - Enumerations</title>
      <link>https://chrilves.github.io/types/2-enums/</link>
      <pubDate>Sun, 16 Dec 2018 00:02:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/2-enums/</guid>
      <description>Now that we know what types are and why there are useful, it is about time to meet some remarkable ones. But before we start, there is some important things to state. As a developer i know how tempting it is to search ready-to-paste answers. But the subject of these post series is nothing like a ready-to-paste answers cookbook. On the contrary, this is a presentation of deep, difficult but rewarding concepts.</description>
    </item>
    
    <item>
      <title>Episode 1 - Why Types?</title>
      <link>https://chrilves.github.io/types/1-why/</link>
      <pubDate>Sun, 16 Dec 2018 00:01:00 +0000</pubDate>
      
      <guid>https://chrilves.github.io/types/1-why/</guid>
      <description>Why using types? When are they useful? Why we should care about types? What are types? These are the questions this series of posts give some answers to. Let&amp;rsquo;s start by realizing a fundamental fact: types are everywhere! Business models are all about types: users, shipments, orders, etc. Placing a user in the cart or shipping a client just makes no sense. Types are specification, discriminating what makes sense from what makes not.</description>
    </item>
    
  </channel>
</rss>